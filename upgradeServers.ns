/** @param {NS} ns **/
//Function to find out the best server size we can afford to buy 25 of
function findLargestAffordableServers(ns) {
	const myCash = ns.getServerMoneyAvailable("home") / 25;
	let ram = ns.getPurchasedServerMaxRam();

	while (ns.getPurchasedServerCost(ram) > myCash && ram > 1) {
		ram /= 2;
	}
	return ram;
}

export async function main(ns) {
	const bestServerUpgrade = findLargestAffordableServers(ns);
	const myServers = ns.getPurchasedServers();
	if (ns.getPurchasedServers().length == 0) {
		await ns.tprint(`You can afford 25 new ${ns.nFormat(bestServerUpgrade * (1e9), "0.00b")} servers`);
		await ns.sleep(3000);
		await ns.tprint(`Buying 25 new ${ns.nFormat(bestServerUpgrade * (1e9), "0.00b")} servers`);
		await ns.sleep(3000);
		var i = 0;
		let needRam = ns.getScriptRam("early-hack-template.ns");

		const MIN_THREADS = 1;
		let threads = Math.max(MIN_THREADS, Math.floor(bestServerUpgrade / needRam));

		while (i < ns.getPurchasedServerLimit()) {
			if (ns.getServerMoneyAvailable("home") > ns.getPurchasedServerCost(bestServerUpgrade)) {
				var hostname = ns.purchaseServer("DellPowerEdge-" + i, bestServerUpgrade);
				await ns.scp("early-hack-template.ns", hostname);
				await ns.exec("early-hack-template.ns", hostname);
			}
			++i
		}
		await ns.tprint(`Scripts sent to all 25 new ${hostname}-${ns.nFormat(bestServerUpgrade * (1e9), "0.00b")} servers`);
		await ns.sleep(3000);
		await ns.tprint(`Script complete`);
		await ns.sleep(100);
		await ns.exit();
	} else {
		const currentServerRam = ns.getServerMaxRam(myServers[0]);

		//Compare best affordable upgrade to what we currently own
		//Exit script if we own better
		//Kill any running scripts and delete all old servers if we can upgrade
		for (var i = 0; i < myServers.length; ++i) {
			if (bestServerUpgrade <= currentServerRam) {
				await ns.tprint(`Your 25 ${ns.nFormat(currentServerRam * (1e9), "0.00b")} servers are already the best you can afford`);
				await ns.sleep(3000);
				await ns.tprint(`Exiting script`);
				await ns.sleep(100);
				await ns.exit();
			} else {
				await ns.killall(myServers[i]);
				await ns.sleep(100);
				await ns.deleteServer(myServers[i]);
			}
		}
		await ns.tprint(`You can afford 25 new ${ns.nFormat(bestServerUpgrade * (1e9), "0.00b")} servers`);
		await ns.sleep(3000);
		await ns.tprint(`All 25 old ${myServers[0]}-${ns.nFormat(currentServerRam * (1e9), "0.00b")} servers deleted`);
		await ns.sleep(3000);
		await ns.tprint(`Buying 25 new ${ns.nFormat(bestServerUpgrade * (1e9), "0.00b")} servers`);
		await ns.sleep(1000);
		
		//Buying Upgraded Servers and sending basic script to them
		var i = 0;
		let needRam = ns.getScriptRam("early-hack-template.ns");

		const MIN_THREADS = 1;
		let threads = Math.max(MIN_THREADS, Math.floor(bestServerUpgrade / needRam));

		while (i < ns.getPurchasedServerLimit()) {
			if (ns.getServerMoneyAvailable("home") > ns.getPurchasedServerCost(bestServerUpgrade)) {
				var hostname = ns.purchaseServer("DellPowerEdge-" + i, bestServerUpgrade);
				await ns.scp("early-hack-template.ns", hostname);
				await ns.exec("early-hack-template.ns", hostname);
			}
			++i
		}
		await ns.tprint(`Scripts sent to all 25 new ${hostname}-${ns.nFormat(bestServerUpgrade * (1e9), "0.00b")} servers`);
		await ns.sleep(3000);
		await ns.tprint(`Script complete`);
		await ns.sleep(100);
		await ns.exit();
	}
}